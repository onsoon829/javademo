함수형 프로그래밍(functional programming)이란 함수를 정의하고 이 함수를 데이터 처리부로 보내 데이터를 처리하는 기법을 말한다.
데이터 처리부는 데이터만 가지고 있을 뿐, 처리 방법이 정해져 있지 않아 외부에서 제공된함수에 의존한다.

데이터 처리부는 제공된 함수의 입력값으로 데이터를 넣고 함수에 정의된 처리 내용을 실행한다.
동일한 데이터도 함수A를 제공해서 처리하는 결과와  함수B를 제공해서 처리하는 결과는 다를 수 있다.
이것이 함수형 프로그래밍의 특징으로, 데이터 처리의 다형성이라고 볼 수 있다.

자바는 함수형 프로그래밍을 위해 Java8부터 람다식(lambda Expresssion)을 지원한다.
람다식은 데이터 처리부에 제공되는 함수 역할을 하는 매개변수를 가진 중괄호 블록이다.
데이터 처리부는 람다식을 받아 매개변수에 데이터를 대입하고 중괄호를 실행시켜 처리한다.

람다식 : (매개변수,...) ->{처리 내용}

자바는 람다식을 익명 구현 객체로 변환한다. 익명 구현 객체란 이름이 없는 인터페이스 구현 객체를 말한다.

Calculable 인터페이스
public interface Calculable{
  void calculate(int x, int y);
}

Calculable 인터페이스의 익명 구현 객체
new Calculable(){
  public void calculate(int x, int y){ 처리 내용 }
}

람다식으로 표현
(x, y) -> {처리 내용}

람다식은 인터페이스의 익명 구현 객체이므로 인터페이스 타입의 매개변수에 대입
public void action(Calculable calculable){
  int x = 10;
  int y =4;
  calculable.calculate(x, y); //데이터를 제공하고 추상 메소드를 호출
}

action()메서드는 제공된 람다식을 이용해서 내부 데이터를 처리하는 처리부 역할을 수행
action(x, y) => {
  int result = x + y;
  System.out.println(result);
 }
 
 action(x, y) => {
   int result = x - y;
   System.out.println(result);
 }
 
 인터페이스의 익명 구현 객체를 람다식으로 표현하려면 인터페이스가 단 하나의 추상메소드만 가져야 한다.
 다음과 같이 두 개의 추상 메소드를 가진 RemoteControl 인터페이스는 람다식으로 표현할 수 없다.
 public interface RemoteControl{
   public void turnOn();
   public void turnOff();
 }
 
 
인터페이스가 단 하나의 추상 메소드를 가질 때, 이를 함수형 인터페이스(function interface)라고 한다.
인터페이스가 함수형 인터페이스임을 보장하기 위해서는 @FunctionalInterface 어노테이션을 붙이면 된다.
@FunctionalInterface를 붙이는 것은 선택사항이지만, 컴파일 과정에서 추상메소드가 하나인지 검사하기 때문에
정확한 함수형 인터페이스를 작성할 수 있게 도와주는 역할을 한다.

인터페이스
 public interface Runnable{
   void run();
 }
 
 람다식
 ( ) =>  {   }
 
 인터페이스
 @FunctionalInterface
 public interface Calculable{
   void calculate(int x, int y);
 }

 람다식
 (x, y) => {  }
 
 